%{
    #include<stdio.h>
    #include<stdlib.h>
    #include<string.h>
    #define YYSTYPE char*
    int yylex();
    int yyerror();
    char temp[100];

%}
%token FOR ID NUM CO BO

%%
START: S {  printf("\n%s\n",$1); return 0;}
;
S: FOR '(' INIT ';' COND ';' INC ')' '{' BD '}' { sprintf(temp,"while( %s)\n { \n %s\n %s\n %s\n }\n", $5, $3,$10, $7); $$=strdup(temp);}
;
INIT: ID '=' NUM  { sprintf(temp,"%s = %s;",$1,$3 ); $$=strdup(temp);}
; 
COND: ID CO NUM { sprintf(temp,"%s %s %s",$1,$2,$3 ); $$=strdup(temp);}
; 
INC: ID IOP { sprintf(temp,"%s%s;\n",$1,$2); $$=strdup(temp);}
; 
IOP: '+' '+' { $$=strdup("++");}
| '-' '-' { $$=strdup("--");}
;
BD:  S BD { sprintf(temp,"%s\n%s",$1,$2); $$=strdup(temp);}
| ID '=' V ';' BD  { sprintf(temp,"%s = %s ;\n%s",$1,$3,$5); $$=strdup(temp); }
|  { $$=strdup(""); }
;
V: ID { $$=strdup($1); }
| E { $$=strdup($1); }

;
E: E '+' G { sprintf(temp,"%s + %s",$1,$3); $$=strdup(temp); }
| G  { $$=strdup($1); }
;
G: G '-' H { sprintf(temp,"%s - %s",$1,$3); $$=strdup(temp); }
| H  { $$=strdup($1); }
;
H: H '/' K { sprintf(temp,"%s / %s",$1,$3); $$=strdup(temp); }
| K { $$=strdup($1); }
;
K: K '%' T { sprintf(temp,"%s %% %s",$1,$3); $$=strdup(temp); }
| T { $$=strdup($1); }
;
T: T '*' F  { sprintf(temp,"%s * %s", $1, $3); $$=strdup(temp); }
| F  { $$=strdup($1); }
;
F: '(' E ')' { $$=strdup($2); }
| NUM { $$=strdup($1); }
| ID { $$=strdup($1); }
;


%%

int main()
{
    yyparse();
    printf("OK\n");
}
int yywrap()
{
    return 1;
}
int yyerror(char *msg)
{
    extern int line;
    extern char *yytext;
    printf("\nError at line %d %s\n",line , yytext);
    exit(0);
}
